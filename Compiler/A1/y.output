Terminals unused in grammar

   DBQUOTE
   SNQUOTE
   CHARLITERAL
   ARGC
   ARGV


State 58 conflicts: 6 shift/reduce
State 71 conflicts: 1 shift/reduce
State 72 conflicts: 1 shift/reduce
State 73 conflicts: 1 shift/reduce
State 74 conflicts: 1 shift/reduce
State 77 conflicts: 1 shift/reduce
State 189 conflicts: 1 shift/reduce
State 191 conflicts: 1 shift/reduce


Grammar

    0 $accept: prog $end

    1 prog: main
    2     | decl_fun_fun_decl_star main
    3     | main decl_fun_star
    4     | decl_fun_fun_decl_star main decl_fun_star

    5 decl_fun_star: decl_fun
    6              | decl_fun_star decl_fun

    7 decl_fun: declaration
    8         | function

    9 decl_fun_fun_decl_star: decl_fun_fun_decl
   10                       | decl_fun_fun_decl_star decl_fun_fun_decl

   11 decl_fun_fun_decl: declaration
   12                  | function
   13                  | function_decl

   14 main: type MAIN LSB RSB block_statement
   15     | type MAIN LSB INT STAR IDENT COMA CHAR STAR IDENT LB RB RSB block_statement

   16 function_decl: type variable_name LSB arg_decl RSB SMCOL

   17 function: type variable_name LSB arg_decl RSB block_statement

   18 arg_decl_star: COMA type variable_name
   19              | COMA type variable_name LB RB
   20              | arg_decl_star COMA type variable_name
   21              | arg_decl_star COMA type variable_name LB RB

   22 arg_decl: %empty
   23         | type variable_name
   24         | type variable_name LB RB
   25         | type variable_name LB RB arg_decl_star
   26         | type variable_name arg_decl_star

   27 declaration: declaration_type SMCOL
   28            | declaration_type multiple_decl_star SMCOL

   29 declaration_type: type variable_name
   30                 | type variable_name EQL expr
   31                 | type variable_name LB expr RB

   32 multiple_decl_star: multiple_decl
   33                   | multiple_decl_star multiple_decl

   34 multiple_decl: COMA variable_name
   35              | COMA variable_name EQL expr
   36              | COMA variable_name LB expr RB

   37 type: INT
   38     | CHAR
   39     | DOUBLE
   40     | VOID

   41 statement: block_statement
   42          | declaration
   43          | if_stmnt
   44          | WHILE LSB rel_expr_star RSB statement
   45          | variable_name assgn_op expr SMCOL
   46          | variable_name LB expr RB assgn_op expr SMCOL
   47          | FOR LSB for_expr RSB statement
   48          | function_call SMCOL
   49          | multiple_assgn
   50          | RETURN expr SMCOL
   51          | RETURN SMCOL
   52          | BREAK SMCOL
   53          | CONTINUE SMCOL

   54 block_statement: LP multiple_statement RP
   55                | LP RP

   56 if_stmnt: IF LSB rel_expr_star RSB statement
   57         | IF LSB rel_expr_star RSB statement ELSE statement

   58 for_expr: for_first SMCOL for_second SMCOL for_third

   59 for_first: %empty
   60          | variable_name EQL expr

   61 for_second: %empty
   62           | rel_expr

   63 for_third: %empty
   64          | expr

   65 multiple_statement: statement
   66                   | multiple_statement statement

   67 multiple_assgn: assgn_lhs LESSER MINUS assgn_rhs SMCOL

   68 assgn_lhs: variable_name
   69          | assgn_lhs COLON variable_name

   70 assgn_rhs: expr
   71          | assgn_rhs COLON expr

   72 function_call: IDENT LSB arguments RSB

   73 arguments: %empty
   74          | expr
   75          | expr argument_rest

   76 argument_rest: COMA expr
   77              | argument_rest COMA expr

   78 rel_expr_star: rel_expr
   79              | rel_expr_m
   80              | rel_expr LOGOP rel_expr_star
   81              | rel_expr_m LOGOP rel_expr_star

   82 rel_expr: expr_ LOGOP expr_
   83         | expr_ rel_op expr_

   84 rel_expr_m: rel_expr LOGOP expr_
   85           | rel_expr rel_op expr_

   86 expr: expr_

   87 expr_: primary_expr binary_op primary_expr
   88      | expr binary_op primary_expr
   89      | primary_expr
   90      | function_call

   91 primary_expr: IDENT
   92             | NUM
   93             | STRING
   94             | IDENT LB expr RB
   95             | LSB expr RSB
   96             | STAR primary_expr
   97             | MINUS primary_expr
   98             | NOT primary_expr
   99             | AMPRESAND primary_expr
  100             | inc_op

  101 inc_op: primary_expr INCOP
  102       | INCOP primary_expr

  103 binary_op: ADD
  104          | MINUS
  105          | STAR
  106          | DIV
  107          | PERCNT
  108          | POW

  109 assgn_op: ASGNOP
  110         | EQL

  111 rel_op: RELOP
  112       | GREATER
  113       | LESSER

  114 variable_name: IDENT
  115              | STAR IDENT


Terminals, with rules where they appear

$end (0) 0
error (256)
IF (258) 56 57
ELSE (259) 57
FOR (260) 47
INT (261) 15 37
CHAR (262) 15 38
DOUBLE (263) 39
VOID (264) 40
WHILE (265) 44
CONTINUE (266) 53
BREAK (267) 52
RETURN (268) 50 51
LP (269) 54 55
RP (270) 54 55
LB (271) 15 19 21 24 25 31 36 46 94
RB (272) 15 19 21 24 25 31 36 46 94
LSB (273) 14 15 16 17 44 47 56 57 72 95
RSB (274) 14 15 16 17 44 47 56 57 72 95
DBQUOTE (275)
SNQUOTE (276)
RELOP (277) 111
LOGOP (278) 80 81 82 84
ASGNOP (279) 109
ADD (280) 103
MINUS (281) 67 97 104
DIV (282) 106
STAR (283) 15 96 105 115
PERCNT (284) 107
NOT (285) 98
AMPRESAND (286) 99
SMCOL (287) 16 27 28 45 46 48 50 51 52 53 58 67
POW (288) 108
GREATER (289) 112
LESSER (290) 67 113
COLON (291) 69 71
IDENT (292) 15 72 91 94 114 115
NUM (293) 92
STRING (294) 93
CHARLITERAL (295)
COMA (296) 15 18 19 20 21 34 35 36 76 77
INCOP (297) 101 102
EQL (298) 30 35 60 110
MAIN (299) 14 15
ARGC (300)
ARGV (301)


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
prog (48)
    on left: 1 2 3 4, on right: 0
decl_fun_star (49)
    on left: 5 6, on right: 3 4 6
decl_fun (50)
    on left: 7 8, on right: 5 6
decl_fun_fun_decl_star (51)
    on left: 9 10, on right: 2 4 10
decl_fun_fun_decl (52)
    on left: 11 12 13, on right: 9 10
main (53)
    on left: 14 15, on right: 1 2 3 4
function_decl (54)
    on left: 16, on right: 13
function (55)
    on left: 17, on right: 8 12
arg_decl_star (56)
    on left: 18 19 20 21, on right: 20 21 25 26
arg_decl (57)
    on left: 22 23 24 25 26, on right: 16 17
declaration (58)
    on left: 27 28, on right: 7 11 42
declaration_type (59)
    on left: 29 30 31, on right: 27 28
multiple_decl_star (60)
    on left: 32 33, on right: 28 33
multiple_decl (61)
    on left: 34 35 36, on right: 32 33
type (62)
    on left: 37 38 39 40, on right: 14 15 16 17 18 19 20 21 23 24 25
    26 29 30 31
statement (63)
    on left: 41 42 43 44 45 46 47 48 49 50 51 52 53, on right: 44 47
    56 57 65 66
block_statement (64)
    on left: 54 55, on right: 14 15 17 41
if_stmnt (65)
    on left: 56 57, on right: 43
for_expr (66)
    on left: 58, on right: 47
for_first (67)
    on left: 59 60, on right: 58
for_second (68)
    on left: 61 62, on right: 58
for_third (69)
    on left: 63 64, on right: 58
multiple_statement (70)
    on left: 65 66, on right: 54 66
multiple_assgn (71)
    on left: 67, on right: 49
assgn_lhs (72)
    on left: 68 69, on right: 67 69
assgn_rhs (73)
    on left: 70 71, on right: 67 71
function_call (74)
    on left: 72, on right: 48 90
arguments (75)
    on left: 73 74 75, on right: 72
argument_rest (76)
    on left: 76 77, on right: 75 77
rel_expr_star (77)
    on left: 78 79 80 81, on right: 44 56 57 80 81
rel_expr (78)
    on left: 82 83, on right: 62 78 80 84 85
rel_expr_m (79)
    on left: 84 85, on right: 79 81
expr (80)
    on left: 86, on right: 30 31 35 36 45 46 50 60 64 70 71 74 75 76
    77 88 94 95
expr_ (81)
    on left: 87 88 89 90, on right: 82 83 84 85 86
primary_expr (82)
    on left: 91 92 93 94 95 96 97 98 99 100, on right: 87 88 89 96
    97 98 99 101 102
inc_op (83)
    on left: 101 102, on right: 100
binary_op (84)
    on left: 103 104 105 106 107 108, on right: 87 88
assgn_op (85)
    on left: 109 110, on right: 45 46
rel_op (86)
    on left: 111 112 113, on right: 83 85
variable_name (87)
    on left: 114 115, on right: 16 17 18 19 20 21 23 24 25 26 29 30
    31 34 35 36 45 46 60 68 69


State 0

    0 $accept: . prog $end

    INT     shift, and go to state 1
    CHAR    shift, and go to state 2
    DOUBLE  shift, and go to state 3
    VOID    shift, and go to state 4

    prog                    go to state 5
    decl_fun_fun_decl_star  go to state 6
    decl_fun_fun_decl       go to state 7
    main                    go to state 8
    function_decl           go to state 9
    function                go to state 10
    declaration             go to state 11
    declaration_type        go to state 12
    type                    go to state 13


State 1

   37 type: INT .

    $default  reduce using rule 37 (type)


State 2

   38 type: CHAR .

    $default  reduce using rule 38 (type)


State 3

   39 type: DOUBLE .

    $default  reduce using rule 39 (type)


State 4

   40 type: VOID .

    $default  reduce using rule 40 (type)


State 5

    0 $accept: prog . $end

    $end  shift, and go to state 14


State 6

    2 prog: decl_fun_fun_decl_star . main
    4     | decl_fun_fun_decl_star . main decl_fun_star
   10 decl_fun_fun_decl_star: decl_fun_fun_decl_star . decl_fun_fun_decl

    INT     shift, and go to state 1
    CHAR    shift, and go to state 2
    DOUBLE  shift, and go to state 3
    VOID    shift, and go to state 4

    decl_fun_fun_decl  go to state 15
    main               go to state 16
    function_decl      go to state 9
    function           go to state 10
    declaration        go to state 11
    declaration_type   go to state 12
    type               go to state 13


State 7

    9 decl_fun_fun_decl_star: decl_fun_fun_decl .

    $default  reduce using rule 9 (decl_fun_fun_decl_star)


State 8

    1 prog: main .
    3     | main . decl_fun_star

    INT     shift, and go to state 1
    CHAR    shift, and go to state 2
    DOUBLE  shift, and go to state 3
    VOID    shift, and go to state 4

    $default  reduce using rule 1 (prog)

    decl_fun_star     go to state 17
    decl_fun          go to state 18
    function          go to state 19
    declaration       go to state 20
    declaration_type  go to state 12
    type              go to state 21


State 9

   13 decl_fun_fun_decl: function_decl .

    $default  reduce using rule 13 (decl_fun_fun_decl)


State 10

   12 decl_fun_fun_decl: function .

    $default  reduce using rule 12 (decl_fun_fun_decl)


State 11

   11 decl_fun_fun_decl: declaration .

    $default  reduce using rule 11 (decl_fun_fun_decl)


State 12

   27 declaration: declaration_type . SMCOL
   28            | declaration_type . multiple_decl_star SMCOL

    SMCOL  shift, and go to state 22
    COMA   shift, and go to state 23

    multiple_decl_star  go to state 24
    multiple_decl       go to state 25


State 13

   14 main: type . MAIN LSB RSB block_statement
   15     | type . MAIN LSB INT STAR IDENT COMA CHAR STAR IDENT LB RB RSB block_statement
   16 function_decl: type . variable_name LSB arg_decl RSB SMCOL
   17 function: type . variable_name LSB arg_decl RSB block_statement
   29 declaration_type: type . variable_name
   30                 | type . variable_name EQL expr
   31                 | type . variable_name LB expr RB

    STAR   shift, and go to state 26
    IDENT  shift, and go to state 27
    MAIN   shift, and go to state 28

    variable_name  go to state 29


State 14

    0 $accept: prog $end .

    $default  accept


State 15

   10 decl_fun_fun_decl_star: decl_fun_fun_decl_star decl_fun_fun_decl .

    $default  reduce using rule 10 (decl_fun_fun_decl_star)


State 16

    2 prog: decl_fun_fun_decl_star main .
    4     | decl_fun_fun_decl_star main . decl_fun_star

    INT     shift, and go to state 1
    CHAR    shift, and go to state 2
    DOUBLE  shift, and go to state 3
    VOID    shift, and go to state 4

    $default  reduce using rule 2 (prog)

    decl_fun_star     go to state 30
    decl_fun          go to state 18
    function          go to state 19
    declaration       go to state 20
    declaration_type  go to state 12
    type              go to state 21


State 17

    3 prog: main decl_fun_star .
    6 decl_fun_star: decl_fun_star . decl_fun

    INT     shift, and go to state 1
    CHAR    shift, and go to state 2
    DOUBLE  shift, and go to state 3
    VOID    shift, and go to state 4

    $default  reduce using rule 3 (prog)

    decl_fun          go to state 31
    function          go to state 19
    declaration       go to state 20
    declaration_type  go to state 12
    type              go to state 21


State 18

    5 decl_fun_star: decl_fun .

    $default  reduce using rule 5 (decl_fun_star)


State 19

    8 decl_fun: function .

    $default  reduce using rule 8 (decl_fun)


State 20

    7 decl_fun: declaration .

    $default  reduce using rule 7 (decl_fun)


State 21

   17 function: type . variable_name LSB arg_decl RSB block_statement
   29 declaration_type: type . variable_name
   30                 | type . variable_name EQL expr
   31                 | type . variable_name LB expr RB

    STAR   shift, and go to state 26
    IDENT  shift, and go to state 27

    variable_name  go to state 32


State 22

   27 declaration: declaration_type SMCOL .

    $default  reduce using rule 27 (declaration)


State 23

   34 multiple_decl: COMA . variable_name
   35              | COMA . variable_name EQL expr
   36              | COMA . variable_name LB expr RB

    STAR   shift, and go to state 26
    IDENT  shift, and go to state 27

    variable_name  go to state 33


State 24

   28 declaration: declaration_type multiple_decl_star . SMCOL
   33 multiple_decl_star: multiple_decl_star . multiple_decl

    SMCOL  shift, and go to state 34
    COMA   shift, and go to state 23

    multiple_decl  go to state 35


State 25

   32 multiple_decl_star: multiple_decl .

    $default  reduce using rule 32 (multiple_decl_star)


State 26

  115 variable_name: STAR . IDENT

    IDENT  shift, and go to state 36


State 27

  114 variable_name: IDENT .

    $default  reduce using rule 114 (variable_name)


State 28

   14 main: type MAIN . LSB RSB block_statement
   15     | type MAIN . LSB INT STAR IDENT COMA CHAR STAR IDENT LB RB RSB block_statement

    LSB  shift, and go to state 37


State 29

   16 function_decl: type variable_name . LSB arg_decl RSB SMCOL
   17 function: type variable_name . LSB arg_decl RSB block_statement
   29 declaration_type: type variable_name .
   30                 | type variable_name . EQL expr
   31                 | type variable_name . LB expr RB

    LB   shift, and go to state 38
    LSB  shift, and go to state 39
    EQL  shift, and go to state 40

    $default  reduce using rule 29 (declaration_type)


State 30

    4 prog: decl_fun_fun_decl_star main decl_fun_star .
    6 decl_fun_star: decl_fun_star . decl_fun

    INT     shift, and go to state 1
    CHAR    shift, and go to state 2
    DOUBLE  shift, and go to state 3
    VOID    shift, and go to state 4

    $default  reduce using rule 4 (prog)

    decl_fun          go to state 31
    function          go to state 19
    declaration       go to state 20
    declaration_type  go to state 12
    type              go to state 21


State 31

    6 decl_fun_star: decl_fun_star decl_fun .

    $default  reduce using rule 6 (decl_fun_star)


State 32

   17 function: type variable_name . LSB arg_decl RSB block_statement
   29 declaration_type: type variable_name .
   30                 | type variable_name . EQL expr
   31                 | type variable_name . LB expr RB

    LB   shift, and go to state 38
    LSB  shift, and go to state 41
    EQL  shift, and go to state 40

    $default  reduce using rule 29 (declaration_type)


State 33

   34 multiple_decl: COMA variable_name .
   35              | COMA variable_name . EQL expr
   36              | COMA variable_name . LB expr RB

    LB   shift, and go to state 42
    EQL  shift, and go to state 43

    $default  reduce using rule 34 (multiple_decl)


State 34

   28 declaration: declaration_type multiple_decl_star SMCOL .

    $default  reduce using rule 28 (declaration)


State 35

   33 multiple_decl_star: multiple_decl_star multiple_decl .

    $default  reduce using rule 33 (multiple_decl_star)


State 36

  115 variable_name: STAR IDENT .

    $default  reduce using rule 115 (variable_name)


State 37

   14 main: type MAIN LSB . RSB block_statement
   15     | type MAIN LSB . INT STAR IDENT COMA CHAR STAR IDENT LB RB RSB block_statement

    INT  shift, and go to state 44
    RSB  shift, and go to state 45


State 38

   31 declaration_type: type variable_name LB . expr RB

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    expr           go to state 56
    expr_          go to state 57
    primary_expr   go to state 58
    inc_op         go to state 59


State 39

   16 function_decl: type variable_name LSB . arg_decl RSB SMCOL
   17 function: type variable_name LSB . arg_decl RSB block_statement

    INT     shift, and go to state 1
    CHAR    shift, and go to state 2
    DOUBLE  shift, and go to state 3
    VOID    shift, and go to state 4

    $default  reduce using rule 22 (arg_decl)

    arg_decl  go to state 60
    type      go to state 61


State 40

   30 declaration_type: type variable_name EQL . expr

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    expr           go to state 62
    expr_          go to state 57
    primary_expr   go to state 58
    inc_op         go to state 59


State 41

   17 function: type variable_name LSB . arg_decl RSB block_statement

    INT     shift, and go to state 1
    CHAR    shift, and go to state 2
    DOUBLE  shift, and go to state 3
    VOID    shift, and go to state 4

    $default  reduce using rule 22 (arg_decl)

    arg_decl  go to state 63
    type      go to state 61


State 42

   36 multiple_decl: COMA variable_name LB . expr RB

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    expr           go to state 64
    expr_          go to state 57
    primary_expr   go to state 58
    inc_op         go to state 59


State 43

   35 multiple_decl: COMA variable_name EQL . expr

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    expr           go to state 65
    expr_          go to state 57
    primary_expr   go to state 58
    inc_op         go to state 59


State 44

   15 main: type MAIN LSB INT . STAR IDENT COMA CHAR STAR IDENT LB RB RSB block_statement

    STAR  shift, and go to state 66


State 45

   14 main: type MAIN LSB RSB . block_statement

    LP  shift, and go to state 67

    block_statement  go to state 68


State 46

   95 primary_expr: LSB . expr RSB

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    expr           go to state 69
    expr_          go to state 57
    primary_expr   go to state 58
    inc_op         go to state 59


State 47

   97 primary_expr: MINUS . primary_expr

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 70
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    primary_expr  go to state 71
    inc_op        go to state 59


State 48

   96 primary_expr: STAR . primary_expr

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 70
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    primary_expr  go to state 72
    inc_op        go to state 59


State 49

   98 primary_expr: NOT . primary_expr

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 70
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    primary_expr  go to state 73
    inc_op        go to state 59


State 50

   99 primary_expr: AMPRESAND . primary_expr

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 70
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    primary_expr  go to state 74
    inc_op        go to state 59


State 51

   72 function_call: IDENT . LSB arguments RSB
   91 primary_expr: IDENT .
   94             | IDENT . LB expr RB

    LB   shift, and go to state 75
    LSB  shift, and go to state 76

    $default  reduce using rule 91 (primary_expr)


State 52

   92 primary_expr: NUM .

    $default  reduce using rule 92 (primary_expr)


State 53

   93 primary_expr: STRING .

    $default  reduce using rule 93 (primary_expr)


State 54

  102 inc_op: INCOP . primary_expr

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 70
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    primary_expr  go to state 77
    inc_op        go to state 59


State 55

   90 expr_: function_call .

    $default  reduce using rule 90 (expr_)


State 56

   31 declaration_type: type variable_name LB expr . RB
   88 expr_: expr . binary_op primary_expr

    RB      shift, and go to state 78
    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    POW     shift, and go to state 84

    binary_op  go to state 85


State 57

   86 expr: expr_ .

    $default  reduce using rule 86 (expr)


State 58

   87 expr_: primary_expr . binary_op primary_expr
   89      | primary_expr .
  101 inc_op: primary_expr . INCOP

    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    POW     shift, and go to state 84
    INCOP   shift, and go to state 86

    ADD       [reduce using rule 89 (expr_)]
    MINUS     [reduce using rule 89 (expr_)]
    DIV       [reduce using rule 89 (expr_)]
    STAR      [reduce using rule 89 (expr_)]
    PERCNT    [reduce using rule 89 (expr_)]
    POW       [reduce using rule 89 (expr_)]
    $default  reduce using rule 89 (expr_)

    binary_op  go to state 87


State 59

  100 primary_expr: inc_op .

    $default  reduce using rule 100 (primary_expr)


State 60

   16 function_decl: type variable_name LSB arg_decl . RSB SMCOL
   17 function: type variable_name LSB arg_decl . RSB block_statement

    RSB  shift, and go to state 88


State 61

   23 arg_decl: type . variable_name
   24         | type . variable_name LB RB
   25         | type . variable_name LB RB arg_decl_star
   26         | type . variable_name arg_decl_star

    STAR   shift, and go to state 26
    IDENT  shift, and go to state 27

    variable_name  go to state 89


State 62

   30 declaration_type: type variable_name EQL expr .
   88 expr_: expr . binary_op primary_expr

    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    POW     shift, and go to state 84

    $default  reduce using rule 30 (declaration_type)

    binary_op  go to state 85


State 63

   17 function: type variable_name LSB arg_decl . RSB block_statement

    RSB  shift, and go to state 90


State 64

   36 multiple_decl: COMA variable_name LB expr . RB
   88 expr_: expr . binary_op primary_expr

    RB      shift, and go to state 91
    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    POW     shift, and go to state 84

    binary_op  go to state 85


State 65

   35 multiple_decl: COMA variable_name EQL expr .
   88 expr_: expr . binary_op primary_expr

    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    POW     shift, and go to state 84

    $default  reduce using rule 35 (multiple_decl)

    binary_op  go to state 85


State 66

   15 main: type MAIN LSB INT STAR . IDENT COMA CHAR STAR IDENT LB RB RSB block_statement

    IDENT  shift, and go to state 92


State 67

   54 block_statement: LP . multiple_statement RP
   55                | LP . RP

    IF        shift, and go to state 93
    FOR       shift, and go to state 94
    INT       shift, and go to state 1
    CHAR      shift, and go to state 2
    DOUBLE    shift, and go to state 3
    VOID      shift, and go to state 4
    WHILE     shift, and go to state 95
    CONTINUE  shift, and go to state 96
    BREAK     shift, and go to state 97
    RETURN    shift, and go to state 98
    LP        shift, and go to state 67
    RP        shift, and go to state 99
    STAR      shift, and go to state 26
    IDENT     shift, and go to state 100

    declaration         go to state 101
    declaration_type    go to state 12
    type                go to state 102
    statement           go to state 103
    block_statement     go to state 104
    if_stmnt            go to state 105
    multiple_statement  go to state 106
    multiple_assgn      go to state 107
    assgn_lhs           go to state 108
    function_call       go to state 109
    variable_name       go to state 110


State 68

   14 main: type MAIN LSB RSB block_statement .

    $default  reduce using rule 14 (main)


State 69

   88 expr_: expr . binary_op primary_expr
   95 primary_expr: LSB expr . RSB

    RSB     shift, and go to state 111
    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    POW     shift, and go to state 84

    binary_op  go to state 85


State 70

   91 primary_expr: IDENT .
   94             | IDENT . LB expr RB

    LB  shift, and go to state 75

    $default  reduce using rule 91 (primary_expr)


State 71

   97 primary_expr: MINUS primary_expr .
  101 inc_op: primary_expr . INCOP

    INCOP  shift, and go to state 86

    INCOP     [reduce using rule 97 (primary_expr)]
    $default  reduce using rule 97 (primary_expr)


State 72

   96 primary_expr: STAR primary_expr .
  101 inc_op: primary_expr . INCOP

    INCOP  shift, and go to state 86

    INCOP     [reduce using rule 96 (primary_expr)]
    $default  reduce using rule 96 (primary_expr)


State 73

   98 primary_expr: NOT primary_expr .
  101 inc_op: primary_expr . INCOP

    INCOP  shift, and go to state 86

    INCOP     [reduce using rule 98 (primary_expr)]
    $default  reduce using rule 98 (primary_expr)


State 74

   99 primary_expr: AMPRESAND primary_expr .
  101 inc_op: primary_expr . INCOP

    INCOP  shift, and go to state 86

    INCOP     [reduce using rule 99 (primary_expr)]
    $default  reduce using rule 99 (primary_expr)


State 75

   94 primary_expr: IDENT LB . expr RB

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    expr           go to state 112
    expr_          go to state 57
    primary_expr   go to state 58
    inc_op         go to state 59


State 76

   72 function_call: IDENT LSB . arguments RSB

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    $default  reduce using rule 73 (arguments)

    function_call  go to state 55
    arguments      go to state 113
    expr           go to state 114
    expr_          go to state 57
    primary_expr   go to state 58
    inc_op         go to state 59


State 77

  101 inc_op: primary_expr . INCOP
  102       | INCOP primary_expr .

    INCOP  shift, and go to state 86

    INCOP     [reduce using rule 102 (inc_op)]
    $default  reduce using rule 102 (inc_op)


State 78

   31 declaration_type: type variable_name LB expr RB .

    $default  reduce using rule 31 (declaration_type)


State 79

  103 binary_op: ADD .

    $default  reduce using rule 103 (binary_op)


State 80

  104 binary_op: MINUS .

    $default  reduce using rule 104 (binary_op)


State 81

  106 binary_op: DIV .

    $default  reduce using rule 106 (binary_op)


State 82

  105 binary_op: STAR .

    $default  reduce using rule 105 (binary_op)


State 83

  107 binary_op: PERCNT .

    $default  reduce using rule 107 (binary_op)


State 84

  108 binary_op: POW .

    $default  reduce using rule 108 (binary_op)


State 85

   88 expr_: expr binary_op . primary_expr

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 70
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    primary_expr  go to state 115
    inc_op        go to state 59


State 86

  101 inc_op: primary_expr INCOP .

    $default  reduce using rule 101 (inc_op)


State 87

   87 expr_: primary_expr binary_op . primary_expr

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 70
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    primary_expr  go to state 116
    inc_op        go to state 59


State 88

   16 function_decl: type variable_name LSB arg_decl RSB . SMCOL
   17 function: type variable_name LSB arg_decl RSB . block_statement

    LP     shift, and go to state 67
    SMCOL  shift, and go to state 117

    block_statement  go to state 118


State 89

   23 arg_decl: type variable_name .
   24         | type variable_name . LB RB
   25         | type variable_name . LB RB arg_decl_star
   26         | type variable_name . arg_decl_star

    LB    shift, and go to state 119
    COMA  shift, and go to state 120

    $default  reduce using rule 23 (arg_decl)

    arg_decl_star  go to state 121


State 90

   17 function: type variable_name LSB arg_decl RSB . block_statement

    LP  shift, and go to state 67

    block_statement  go to state 118


State 91

   36 multiple_decl: COMA variable_name LB expr RB .

    $default  reduce using rule 36 (multiple_decl)


State 92

   15 main: type MAIN LSB INT STAR IDENT . COMA CHAR STAR IDENT LB RB RSB block_statement

    COMA  shift, and go to state 122


State 93

   56 if_stmnt: IF . LSB rel_expr_star RSB statement
   57         | IF . LSB rel_expr_star RSB statement ELSE statement

    LSB  shift, and go to state 123


State 94

   47 statement: FOR . LSB for_expr RSB statement

    LSB  shift, and go to state 124


State 95

   44 statement: WHILE . LSB rel_expr_star RSB statement

    LSB  shift, and go to state 125


State 96

   53 statement: CONTINUE . SMCOL

    SMCOL  shift, and go to state 126


State 97

   52 statement: BREAK . SMCOL

    SMCOL  shift, and go to state 127


State 98

   50 statement: RETURN . expr SMCOL
   51          | RETURN . SMCOL

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    SMCOL      shift, and go to state 128
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    expr           go to state 129
    expr_          go to state 57
    primary_expr   go to state 58
    inc_op         go to state 59


State 99

   55 block_statement: LP RP .

    $default  reduce using rule 55 (block_statement)


State 100

   72 function_call: IDENT . LSB arguments RSB
  114 variable_name: IDENT .

    LSB  shift, and go to state 76

    $default  reduce using rule 114 (variable_name)


State 101

   42 statement: declaration .

    $default  reduce using rule 42 (statement)


State 102

   29 declaration_type: type . variable_name
   30                 | type . variable_name EQL expr
   31                 | type . variable_name LB expr RB

    STAR   shift, and go to state 26
    IDENT  shift, and go to state 27

    variable_name  go to state 130


State 103

   65 multiple_statement: statement .

    $default  reduce using rule 65 (multiple_statement)


State 104

   41 statement: block_statement .

    $default  reduce using rule 41 (statement)


State 105

   43 statement: if_stmnt .

    $default  reduce using rule 43 (statement)


State 106

   54 block_statement: LP multiple_statement . RP
   66 multiple_statement: multiple_statement . statement

    IF        shift, and go to state 93
    FOR       shift, and go to state 94
    INT       shift, and go to state 1
    CHAR      shift, and go to state 2
    DOUBLE    shift, and go to state 3
    VOID      shift, and go to state 4
    WHILE     shift, and go to state 95
    CONTINUE  shift, and go to state 96
    BREAK     shift, and go to state 97
    RETURN    shift, and go to state 98
    LP        shift, and go to state 67
    RP        shift, and go to state 131
    STAR      shift, and go to state 26
    IDENT     shift, and go to state 100

    declaration       go to state 101
    declaration_type  go to state 12
    type              go to state 102
    statement         go to state 132
    block_statement   go to state 104
    if_stmnt          go to state 105
    multiple_assgn    go to state 107
    assgn_lhs         go to state 108
    function_call     go to state 109
    variable_name     go to state 110


State 107

   49 statement: multiple_assgn .

    $default  reduce using rule 49 (statement)


State 108

   67 multiple_assgn: assgn_lhs . LESSER MINUS assgn_rhs SMCOL
   69 assgn_lhs: assgn_lhs . COLON variable_name

    LESSER  shift, and go to state 133
    COLON   shift, and go to state 134


State 109

   48 statement: function_call . SMCOL

    SMCOL  shift, and go to state 135


State 110

   45 statement: variable_name . assgn_op expr SMCOL
   46          | variable_name . LB expr RB assgn_op expr SMCOL
   68 assgn_lhs: variable_name .

    LB      shift, and go to state 136
    ASGNOP  shift, and go to state 137
    EQL     shift, and go to state 138

    $default  reduce using rule 68 (assgn_lhs)

    assgn_op  go to state 139


State 111

   95 primary_expr: LSB expr RSB .

    $default  reduce using rule 95 (primary_expr)


State 112

   88 expr_: expr . binary_op primary_expr
   94 primary_expr: IDENT LB expr . RB

    RB      shift, and go to state 140
    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    POW     shift, and go to state 84

    binary_op  go to state 85


State 113

   72 function_call: IDENT LSB arguments . RSB

    RSB  shift, and go to state 141


State 114

   74 arguments: expr .
   75          | expr . argument_rest
   88 expr_: expr . binary_op primary_expr

    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    POW     shift, and go to state 84
    COMA    shift, and go to state 142

    $default  reduce using rule 74 (arguments)

    argument_rest  go to state 143
    binary_op      go to state 85


State 115

   88 expr_: expr binary_op primary_expr .
  101 inc_op: primary_expr . INCOP

    INCOP  shift, and go to state 86

    $default  reduce using rule 88 (expr_)


State 116

   87 expr_: primary_expr binary_op primary_expr .
  101 inc_op: primary_expr . INCOP

    INCOP  shift, and go to state 86

    $default  reduce using rule 87 (expr_)


State 117

   16 function_decl: type variable_name LSB arg_decl RSB SMCOL .

    $default  reduce using rule 16 (function_decl)


State 118

   17 function: type variable_name LSB arg_decl RSB block_statement .

    $default  reduce using rule 17 (function)


State 119

   24 arg_decl: type variable_name LB . RB
   25         | type variable_name LB . RB arg_decl_star

    RB  shift, and go to state 144


State 120

   18 arg_decl_star: COMA . type variable_name
   19              | COMA . type variable_name LB RB

    INT     shift, and go to state 1
    CHAR    shift, and go to state 2
    DOUBLE  shift, and go to state 3
    VOID    shift, and go to state 4

    type  go to state 145


State 121

   20 arg_decl_star: arg_decl_star . COMA type variable_name
   21              | arg_decl_star . COMA type variable_name LB RB
   26 arg_decl: type variable_name arg_decl_star .

    COMA  shift, and go to state 146

    $default  reduce using rule 26 (arg_decl)


State 122

   15 main: type MAIN LSB INT STAR IDENT COMA . CHAR STAR IDENT LB RB RSB block_statement

    CHAR  shift, and go to state 147


State 123

   56 if_stmnt: IF LSB . rel_expr_star RSB statement
   57         | IF LSB . rel_expr_star RSB statement ELSE statement

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    rel_expr_star  go to state 148
    rel_expr       go to state 149
    rel_expr_m     go to state 150
    expr           go to state 151
    expr_          go to state 152
    primary_expr   go to state 58
    inc_op         go to state 59


State 124

   47 statement: FOR LSB . for_expr RSB statement

    STAR   shift, and go to state 26
    IDENT  shift, and go to state 27

    $default  reduce using rule 59 (for_first)

    for_expr       go to state 153
    for_first      go to state 154
    variable_name  go to state 155


State 125

   44 statement: WHILE LSB . rel_expr_star RSB statement

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    rel_expr_star  go to state 156
    rel_expr       go to state 149
    rel_expr_m     go to state 150
    expr           go to state 151
    expr_          go to state 152
    primary_expr   go to state 58
    inc_op         go to state 59


State 126

   53 statement: CONTINUE SMCOL .

    $default  reduce using rule 53 (statement)


State 127

   52 statement: BREAK SMCOL .

    $default  reduce using rule 52 (statement)


State 128

   51 statement: RETURN SMCOL .

    $default  reduce using rule 51 (statement)


State 129

   50 statement: RETURN expr . SMCOL
   88 expr_: expr . binary_op primary_expr

    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    SMCOL   shift, and go to state 157
    POW     shift, and go to state 84

    binary_op  go to state 85


State 130

   29 declaration_type: type variable_name .
   30                 | type variable_name . EQL expr
   31                 | type variable_name . LB expr RB

    LB   shift, and go to state 38
    EQL  shift, and go to state 40

    $default  reduce using rule 29 (declaration_type)


State 131

   54 block_statement: LP multiple_statement RP .

    $default  reduce using rule 54 (block_statement)


State 132

   66 multiple_statement: multiple_statement statement .

    $default  reduce using rule 66 (multiple_statement)


State 133

   67 multiple_assgn: assgn_lhs LESSER . MINUS assgn_rhs SMCOL

    MINUS  shift, and go to state 158


State 134

   69 assgn_lhs: assgn_lhs COLON . variable_name

    STAR   shift, and go to state 26
    IDENT  shift, and go to state 27

    variable_name  go to state 159


State 135

   48 statement: function_call SMCOL .

    $default  reduce using rule 48 (statement)


State 136

   46 statement: variable_name LB . expr RB assgn_op expr SMCOL

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    expr           go to state 160
    expr_          go to state 57
    primary_expr   go to state 58
    inc_op         go to state 59


State 137

  109 assgn_op: ASGNOP .

    $default  reduce using rule 109 (assgn_op)


State 138

  110 assgn_op: EQL .

    $default  reduce using rule 110 (assgn_op)


State 139

   45 statement: variable_name assgn_op . expr SMCOL

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    expr           go to state 161
    expr_          go to state 57
    primary_expr   go to state 58
    inc_op         go to state 59


State 140

   94 primary_expr: IDENT LB expr RB .

    $default  reduce using rule 94 (primary_expr)


State 141

   72 function_call: IDENT LSB arguments RSB .

    $default  reduce using rule 72 (function_call)


State 142

   76 argument_rest: COMA . expr

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    expr           go to state 162
    expr_          go to state 57
    primary_expr   go to state 58
    inc_op         go to state 59


State 143

   75 arguments: expr argument_rest .
   77 argument_rest: argument_rest . COMA expr

    COMA  shift, and go to state 163

    $default  reduce using rule 75 (arguments)


State 144

   24 arg_decl: type variable_name LB RB .
   25         | type variable_name LB RB . arg_decl_star

    COMA  shift, and go to state 120

    $default  reduce using rule 24 (arg_decl)

    arg_decl_star  go to state 164


State 145

   18 arg_decl_star: COMA type . variable_name
   19              | COMA type . variable_name LB RB

    STAR   shift, and go to state 26
    IDENT  shift, and go to state 27

    variable_name  go to state 165


State 146

   20 arg_decl_star: arg_decl_star COMA . type variable_name
   21              | arg_decl_star COMA . type variable_name LB RB

    INT     shift, and go to state 1
    CHAR    shift, and go to state 2
    DOUBLE  shift, and go to state 3
    VOID    shift, and go to state 4

    type  go to state 166


State 147

   15 main: type MAIN LSB INT STAR IDENT COMA CHAR . STAR IDENT LB RB RSB block_statement

    STAR  shift, and go to state 167


State 148

   56 if_stmnt: IF LSB rel_expr_star . RSB statement
   57         | IF LSB rel_expr_star . RSB statement ELSE statement

    RSB  shift, and go to state 168


State 149

   78 rel_expr_star: rel_expr .
   80              | rel_expr . LOGOP rel_expr_star
   84 rel_expr_m: rel_expr . LOGOP expr_
   85           | rel_expr . rel_op expr_

    RELOP    shift, and go to state 169
    LOGOP    shift, and go to state 170
    GREATER  shift, and go to state 171
    LESSER   shift, and go to state 172

    $default  reduce using rule 78 (rel_expr_star)

    rel_op  go to state 173


State 150

   79 rel_expr_star: rel_expr_m .
   81              | rel_expr_m . LOGOP rel_expr_star

    LOGOP  shift, and go to state 174

    $default  reduce using rule 79 (rel_expr_star)


State 151

   88 expr_: expr . binary_op primary_expr

    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    POW     shift, and go to state 84

    binary_op  go to state 85


State 152

   82 rel_expr: expr_ . LOGOP expr_
   83         | expr_ . rel_op expr_
   86 expr: expr_ .

    RELOP    shift, and go to state 169
    LOGOP    shift, and go to state 175
    GREATER  shift, and go to state 171
    LESSER   shift, and go to state 172

    $default  reduce using rule 86 (expr)

    rel_op  go to state 176


State 153

   47 statement: FOR LSB for_expr . RSB statement

    RSB  shift, and go to state 177


State 154

   58 for_expr: for_first . SMCOL for_second SMCOL for_third

    SMCOL  shift, and go to state 178


State 155

   60 for_first: variable_name . EQL expr

    EQL  shift, and go to state 179


State 156

   44 statement: WHILE LSB rel_expr_star . RSB statement

    RSB  shift, and go to state 180


State 157

   50 statement: RETURN expr SMCOL .

    $default  reduce using rule 50 (statement)


State 158

   67 multiple_assgn: assgn_lhs LESSER MINUS . assgn_rhs SMCOL

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    assgn_rhs      go to state 181
    function_call  go to state 55
    expr           go to state 182
    expr_          go to state 57
    primary_expr   go to state 58
    inc_op         go to state 59


State 159

   69 assgn_lhs: assgn_lhs COLON variable_name .

    $default  reduce using rule 69 (assgn_lhs)


State 160

   46 statement: variable_name LB expr . RB assgn_op expr SMCOL
   88 expr_: expr . binary_op primary_expr

    RB      shift, and go to state 183
    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    POW     shift, and go to state 84

    binary_op  go to state 85


State 161

   45 statement: variable_name assgn_op expr . SMCOL
   88 expr_: expr . binary_op primary_expr

    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    SMCOL   shift, and go to state 184
    POW     shift, and go to state 84

    binary_op  go to state 85


State 162

   76 argument_rest: COMA expr .
   88 expr_: expr . binary_op primary_expr

    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    POW     shift, and go to state 84

    $default  reduce using rule 76 (argument_rest)

    binary_op  go to state 85


State 163

   77 argument_rest: argument_rest COMA . expr

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    expr           go to state 185
    expr_          go to state 57
    primary_expr   go to state 58
    inc_op         go to state 59


State 164

   20 arg_decl_star: arg_decl_star . COMA type variable_name
   21              | arg_decl_star . COMA type variable_name LB RB
   25 arg_decl: type variable_name LB RB arg_decl_star .

    COMA  shift, and go to state 146

    $default  reduce using rule 25 (arg_decl)


State 165

   18 arg_decl_star: COMA type variable_name .
   19              | COMA type variable_name . LB RB

    LB  shift, and go to state 186

    $default  reduce using rule 18 (arg_decl_star)


State 166

   20 arg_decl_star: arg_decl_star COMA type . variable_name
   21              | arg_decl_star COMA type . variable_name LB RB

    STAR   shift, and go to state 26
    IDENT  shift, and go to state 27

    variable_name  go to state 187


State 167

   15 main: type MAIN LSB INT STAR IDENT COMA CHAR STAR . IDENT LB RB RSB block_statement

    IDENT  shift, and go to state 188


State 168

   56 if_stmnt: IF LSB rel_expr_star RSB . statement
   57         | IF LSB rel_expr_star RSB . statement ELSE statement

    IF        shift, and go to state 93
    FOR       shift, and go to state 94
    INT       shift, and go to state 1
    CHAR      shift, and go to state 2
    DOUBLE    shift, and go to state 3
    VOID      shift, and go to state 4
    WHILE     shift, and go to state 95
    CONTINUE  shift, and go to state 96
    BREAK     shift, and go to state 97
    RETURN    shift, and go to state 98
    LP        shift, and go to state 67
    STAR      shift, and go to state 26
    IDENT     shift, and go to state 100

    declaration       go to state 101
    declaration_type  go to state 12
    type              go to state 102
    statement         go to state 189
    block_statement   go to state 104
    if_stmnt          go to state 105
    multiple_assgn    go to state 107
    assgn_lhs         go to state 108
    function_call     go to state 109
    variable_name     go to state 110


State 169

  111 rel_op: RELOP .

    $default  reduce using rule 111 (rel_op)


State 170

   80 rel_expr_star: rel_expr LOGOP . rel_expr_star
   84 rel_expr_m: rel_expr LOGOP . expr_

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    rel_expr_star  go to state 190
    rel_expr       go to state 149
    rel_expr_m     go to state 150
    expr           go to state 151
    expr_          go to state 191
    primary_expr   go to state 58
    inc_op         go to state 59


State 171

  112 rel_op: GREATER .

    $default  reduce using rule 112 (rel_op)


State 172

  113 rel_op: LESSER .

    $default  reduce using rule 113 (rel_op)


State 173

   85 rel_expr_m: rel_expr rel_op . expr_

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    expr           go to state 151
    expr_          go to state 192
    primary_expr   go to state 58
    inc_op         go to state 59


State 174

   81 rel_expr_star: rel_expr_m LOGOP . rel_expr_star

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    rel_expr_star  go to state 193
    rel_expr       go to state 149
    rel_expr_m     go to state 150
    expr           go to state 151
    expr_          go to state 152
    primary_expr   go to state 58
    inc_op         go to state 59


State 175

   82 rel_expr: expr_ LOGOP . expr_

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    expr           go to state 151
    expr_          go to state 194
    primary_expr   go to state 58
    inc_op         go to state 59


State 176

   83 rel_expr: expr_ rel_op . expr_

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    expr           go to state 151
    expr_          go to state 195
    primary_expr   go to state 58
    inc_op         go to state 59


State 177

   47 statement: FOR LSB for_expr RSB . statement

    IF        shift, and go to state 93
    FOR       shift, and go to state 94
    INT       shift, and go to state 1
    CHAR      shift, and go to state 2
    DOUBLE    shift, and go to state 3
    VOID      shift, and go to state 4
    WHILE     shift, and go to state 95
    CONTINUE  shift, and go to state 96
    BREAK     shift, and go to state 97
    RETURN    shift, and go to state 98
    LP        shift, and go to state 67
    STAR      shift, and go to state 26
    IDENT     shift, and go to state 100

    declaration       go to state 101
    declaration_type  go to state 12
    type              go to state 102
    statement         go to state 196
    block_statement   go to state 104
    if_stmnt          go to state 105
    multiple_assgn    go to state 107
    assgn_lhs         go to state 108
    function_call     go to state 109
    variable_name     go to state 110


State 178

   58 for_expr: for_first SMCOL . for_second SMCOL for_third

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    $default  reduce using rule 61 (for_second)

    for_second     go to state 197
    function_call  go to state 55
    rel_expr       go to state 198
    expr           go to state 151
    expr_          go to state 152
    primary_expr   go to state 58
    inc_op         go to state 59


State 179

   60 for_first: variable_name EQL . expr

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    expr           go to state 199
    expr_          go to state 57
    primary_expr   go to state 58
    inc_op         go to state 59


State 180

   44 statement: WHILE LSB rel_expr_star RSB . statement

    IF        shift, and go to state 93
    FOR       shift, and go to state 94
    INT       shift, and go to state 1
    CHAR      shift, and go to state 2
    DOUBLE    shift, and go to state 3
    VOID      shift, and go to state 4
    WHILE     shift, and go to state 95
    CONTINUE  shift, and go to state 96
    BREAK     shift, and go to state 97
    RETURN    shift, and go to state 98
    LP        shift, and go to state 67
    STAR      shift, and go to state 26
    IDENT     shift, and go to state 100

    declaration       go to state 101
    declaration_type  go to state 12
    type              go to state 102
    statement         go to state 200
    block_statement   go to state 104
    if_stmnt          go to state 105
    multiple_assgn    go to state 107
    assgn_lhs         go to state 108
    function_call     go to state 109
    variable_name     go to state 110


State 181

   67 multiple_assgn: assgn_lhs LESSER MINUS assgn_rhs . SMCOL
   71 assgn_rhs: assgn_rhs . COLON expr

    SMCOL  shift, and go to state 201
    COLON  shift, and go to state 202


State 182

   70 assgn_rhs: expr .
   88 expr_: expr . binary_op primary_expr

    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    POW     shift, and go to state 84

    $default  reduce using rule 70 (assgn_rhs)

    binary_op  go to state 85


State 183

   46 statement: variable_name LB expr RB . assgn_op expr SMCOL

    ASGNOP  shift, and go to state 137
    EQL     shift, and go to state 138

    assgn_op  go to state 203


State 184

   45 statement: variable_name assgn_op expr SMCOL .

    $default  reduce using rule 45 (statement)


State 185

   77 argument_rest: argument_rest COMA expr .
   88 expr_: expr . binary_op primary_expr

    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    POW     shift, and go to state 84

    $default  reduce using rule 77 (argument_rest)

    binary_op  go to state 85


State 186

   19 arg_decl_star: COMA type variable_name LB . RB

    RB  shift, and go to state 204


State 187

   20 arg_decl_star: arg_decl_star COMA type variable_name .
   21              | arg_decl_star COMA type variable_name . LB RB

    LB  shift, and go to state 205

    $default  reduce using rule 20 (arg_decl_star)


State 188

   15 main: type MAIN LSB INT STAR IDENT COMA CHAR STAR IDENT . LB RB RSB block_statement

    LB  shift, and go to state 206


State 189

   56 if_stmnt: IF LSB rel_expr_star RSB statement .
   57         | IF LSB rel_expr_star RSB statement . ELSE statement

    ELSE  shift, and go to state 207

    ELSE      [reduce using rule 56 (if_stmnt)]
    $default  reduce using rule 56 (if_stmnt)


State 190

   80 rel_expr_star: rel_expr LOGOP rel_expr_star .

    $default  reduce using rule 80 (rel_expr_star)


State 191

   82 rel_expr: expr_ . LOGOP expr_
   83         | expr_ . rel_op expr_
   84 rel_expr_m: rel_expr LOGOP expr_ .
   86 expr: expr_ .

    RELOP    shift, and go to state 169
    LOGOP    shift, and go to state 175
    GREATER  shift, and go to state 171
    LESSER   shift, and go to state 172

    RSB       reduce using rule 84 (rel_expr_m)
    LOGOP     [reduce using rule 84 (rel_expr_m)]
    $default  reduce using rule 86 (expr)

    rel_op  go to state 176


State 192

   85 rel_expr_m: rel_expr rel_op expr_ .
   86 expr: expr_ .

    RSB       reduce using rule 85 (rel_expr_m)
    LOGOP     reduce using rule 85 (rel_expr_m)
    $default  reduce using rule 86 (expr)


State 193

   81 rel_expr_star: rel_expr_m LOGOP rel_expr_star .

    $default  reduce using rule 81 (rel_expr_star)


State 194

   82 rel_expr: expr_ LOGOP expr_ .
   86 expr: expr_ .

    ADD       reduce using rule 86 (expr)
    MINUS     reduce using rule 86 (expr)
    DIV       reduce using rule 86 (expr)
    STAR      reduce using rule 86 (expr)
    PERCNT    reduce using rule 86 (expr)
    POW       reduce using rule 86 (expr)
    $default  reduce using rule 82 (rel_expr)


State 195

   83 rel_expr: expr_ rel_op expr_ .
   86 expr: expr_ .

    ADD       reduce using rule 86 (expr)
    MINUS     reduce using rule 86 (expr)
    DIV       reduce using rule 86 (expr)
    STAR      reduce using rule 86 (expr)
    PERCNT    reduce using rule 86 (expr)
    POW       reduce using rule 86 (expr)
    $default  reduce using rule 83 (rel_expr)


State 196

   47 statement: FOR LSB for_expr RSB statement .

    $default  reduce using rule 47 (statement)


State 197

   58 for_expr: for_first SMCOL for_second . SMCOL for_third

    SMCOL  shift, and go to state 208


State 198

   62 for_second: rel_expr .

    $default  reduce using rule 62 (for_second)


State 199

   60 for_first: variable_name EQL expr .
   88 expr_: expr . binary_op primary_expr

    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    POW     shift, and go to state 84

    $default  reduce using rule 60 (for_first)

    binary_op  go to state 85


State 200

   44 statement: WHILE LSB rel_expr_star RSB statement .

    $default  reduce using rule 44 (statement)


State 201

   67 multiple_assgn: assgn_lhs LESSER MINUS assgn_rhs SMCOL .

    $default  reduce using rule 67 (multiple_assgn)


State 202

   71 assgn_rhs: assgn_rhs COLON . expr

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    expr           go to state 209
    expr_          go to state 57
    primary_expr   go to state 58
    inc_op         go to state 59


State 203

   46 statement: variable_name LB expr RB assgn_op . expr SMCOL

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    function_call  go to state 55
    expr           go to state 210
    expr_          go to state 57
    primary_expr   go to state 58
    inc_op         go to state 59


State 204

   19 arg_decl_star: COMA type variable_name LB RB .

    $default  reduce using rule 19 (arg_decl_star)


State 205

   21 arg_decl_star: arg_decl_star COMA type variable_name LB . RB

    RB  shift, and go to state 211


State 206

   15 main: type MAIN LSB INT STAR IDENT COMA CHAR STAR IDENT LB . RB RSB block_statement

    RB  shift, and go to state 212


State 207

   57 if_stmnt: IF LSB rel_expr_star RSB statement ELSE . statement

    IF        shift, and go to state 93
    FOR       shift, and go to state 94
    INT       shift, and go to state 1
    CHAR      shift, and go to state 2
    DOUBLE    shift, and go to state 3
    VOID      shift, and go to state 4
    WHILE     shift, and go to state 95
    CONTINUE  shift, and go to state 96
    BREAK     shift, and go to state 97
    RETURN    shift, and go to state 98
    LP        shift, and go to state 67
    STAR      shift, and go to state 26
    IDENT     shift, and go to state 100

    declaration       go to state 101
    declaration_type  go to state 12
    type              go to state 102
    statement         go to state 213
    block_statement   go to state 104
    if_stmnt          go to state 105
    multiple_assgn    go to state 107
    assgn_lhs         go to state 108
    function_call     go to state 109
    variable_name     go to state 110


State 208

   58 for_expr: for_first SMCOL for_second SMCOL . for_third

    LSB        shift, and go to state 46
    MINUS      shift, and go to state 47
    STAR       shift, and go to state 48
    NOT        shift, and go to state 49
    AMPRESAND  shift, and go to state 50
    IDENT      shift, and go to state 51
    NUM        shift, and go to state 52
    STRING     shift, and go to state 53
    INCOP      shift, and go to state 54

    $default  reduce using rule 63 (for_third)

    for_third      go to state 214
    function_call  go to state 55
    expr           go to state 215
    expr_          go to state 57
    primary_expr   go to state 58
    inc_op         go to state 59


State 209

   71 assgn_rhs: assgn_rhs COLON expr .
   88 expr_: expr . binary_op primary_expr

    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    POW     shift, and go to state 84

    $default  reduce using rule 71 (assgn_rhs)

    binary_op  go to state 85


State 210

   46 statement: variable_name LB expr RB assgn_op expr . SMCOL
   88 expr_: expr . binary_op primary_expr

    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    SMCOL   shift, and go to state 216
    POW     shift, and go to state 84

    binary_op  go to state 85


State 211

   21 arg_decl_star: arg_decl_star COMA type variable_name LB RB .

    $default  reduce using rule 21 (arg_decl_star)


State 212

   15 main: type MAIN LSB INT STAR IDENT COMA CHAR STAR IDENT LB RB . RSB block_statement

    RSB  shift, and go to state 217


State 213

   57 if_stmnt: IF LSB rel_expr_star RSB statement ELSE statement .

    $default  reduce using rule 57 (if_stmnt)


State 214

   58 for_expr: for_first SMCOL for_second SMCOL for_third .

    $default  reduce using rule 58 (for_expr)


State 215

   64 for_third: expr .
   88 expr_: expr . binary_op primary_expr

    ADD     shift, and go to state 79
    MINUS   shift, and go to state 80
    DIV     shift, and go to state 81
    STAR    shift, and go to state 82
    PERCNT  shift, and go to state 83
    POW     shift, and go to state 84

    $default  reduce using rule 64 (for_third)

    binary_op  go to state 85


State 216

   46 statement: variable_name LB expr RB assgn_op expr SMCOL .

    $default  reduce using rule 46 (statement)


State 217

   15 main: type MAIN LSB INT STAR IDENT COMA CHAR STAR IDENT LB RB RSB . block_statement

    LP  shift, and go to state 67

    block_statement  go to state 218


State 218

   15 main: type MAIN LSB INT STAR IDENT COMA CHAR STAR IDENT LB RB RSB block_statement .

    $default  reduce using rule 15 (main)
