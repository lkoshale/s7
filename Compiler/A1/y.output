Nonterminals useless in grammar

   prog
   decl_fun_star
   decl_fun
   decl_fun_fun_decl_star
   decl_fun_fun_decl
   main
   function_decl
   function
   arg_decl_star
   arg_decl
   declaration
   declaration_type
   multiple_decl_star
   multiple_decl
   type
   statement
   block_statement
   if_stmnt
   for_expr
   multiple_statement
   function_call
   arguments
   argument_rest
   assgn_op
   variable_name


Terminals unused in grammar

   IF
   ELSE
   FOR
   INT
   CHAR
   DOUBLE
   VOID
   WHILE
   CONTINUE
   BREAK
   RETURN
   LP
   RP
   LB
   RB
   DBQUOTE
   SNQUOTE
   ASGNOP
   SMCOL
   CHARLITERAL
   COMA
   EQL
   MAIN
   ARGC
   ARGV


Rules useless in grammar

   27 prog: main
   28     | decl_fun_fun_decl_star main
   29     | main decl_fun_star
   30     | decl_fun_fun_decl_star main decl_fun_star
   31     | expr

   32 decl_fun_star: decl_fun
   33              | decl_fun_star decl_fun

   34 decl_fun: declaration
   35         | function

   36 decl_fun_fun_decl_star: decl_fun_fun_decl
   37                       | decl_fun_fun_decl_star decl_fun_fun_decl

   38 decl_fun_fun_decl: declaration
   39                  | function
   40                  | function_decl

   41 main: type MAIN LSB RSB block_statement
   42     | type MAIN LSB INT STAR IDENT COMA CHAR STAR IDENT LB RB RSB block_statement

   43 function_decl: type variable_name LSB arg_decl RSB SMCOL

   44 function: type variable_name LSB arg_decl RSB block_statement

   45 arg_decl_star: COMA type variable_name
   46              | COMA type variable_name LB RB
   47              | arg_decl_star COMA type variable_name
   48              | arg_decl_star COMA type variable_name LB RB

   49 arg_decl: %empty
   50         | type variable_name
   51         | type variable_name LB RB
   52         | type variable_name LB RB arg_decl_star
   53         | type variable_name arg_decl_star

   54 declaration: declaration_type SMCOL
   55            | declaration_type multiple_decl_star SMCOL

   56 declaration_type: type variable_name
   57                 | type variable_name EQL expr
   58                 | type variable_name LB expr RB

   59 multiple_decl_star: multiple_decl
   60                   | multiple_decl_star multiple_decl

   61 multiple_decl: COMA variable_name
   62              | COMA variable_name EQL expr
   63              | COMA variable_name LB expr RB

   64 type: INT
   65     | CHAR
   66     | DOUBLE
   67     | VOID

   68 statement: block_statement
   69          | declaration
   70          | if_stmnt
   71          | WHILE LSB rel_expr_star RSB statement
   72          | variable_name assgn_op expr SMCOL
   73          | variable_name LB expr RB assgn_op expr SMCOL
   74          | FOR LSB for_expr RSB statement
   75          | function_call
   76          | RETURN expr SMCOL
   77          | BREAK SMCOL
   78          | CONTINUE SMCOL

   79 block_statement: LP multiple_statement RP
   80                | LP RP

   81 if_stmnt: IF LSB rel_expr_star RSB statement
   82         | IF LSB rel_expr_star RSB statement ELSE statement

   83 for_expr: variable_name EQL expr SMCOL rel_expr SMCOL expr

   84 multiple_statement: statement
   85                   | multiple_statement statement

   86 function_call: IDENT LSB arguments RSB SMCOL

   87 arguments: expr
   88          | expr argument_rest

   89 argument_rest: COMA expr
   90              | argument_rest COMA expr

   91 assgn_op: ASGNOP
   92         | EQL

   93 variable_name: IDENT
   94              | STAR IDENT


State 12 conflicts: 2 shift/reduce
State 14 conflicts: 5 shift/reduce
State 16 conflicts: 1 shift/reduce
State 17 conflicts: 1 shift/reduce
State 18 conflicts: 1 shift/reduce
State 19 conflicts: 1 shift/reduce
State 20 conflicts: 1 shift/reduce
State 31 conflicts: 11 reduce/reduce
State 39 conflicts: 1 shift/reduce
State 40 conflicts: 1 shift/reduce
State 41 conflicts: 1 shift/reduce
State 42 conflicts: 1 shift/reduce


Grammar

    0 $accept: st $end

    1 st: expr

    2 expr: primary_expr binary_op primary_expr
    3     | expr binary_op primary_expr
    4     | primary_expr
    5     | rel_expr

    6 rel_expr: primary_expr LOGOP primary_expr
    7         | primary_expr RELOP primary_expr
    8         | rel_expr_star

    9 rel_expr_star: rel_expr rel_expr_star
   10              | rel_expr LOGOP primary_expr
   11              | rel_expr RELOP primary_expr

   12 primary_expr: IDENT
   13             | NUM
   14             | STRING
   15             | LSB expr RSB
   16             | STAR primary_expr
   17             | MINUS primary_expr
   18             | NOT primary_expr
   19             | AMPRESAND primary_expr
   20             | primary_expr INCOP
   21             | INCOP primary_expr

   22 binary_op: ADD
   23          | MINUS
   24          | STAR
   25          | DIV
   26          | PERCNT


Terminals, with rules where they appear

$end (0) 0
error (256)
IF (258)
ELSE (259)
FOR (260)
INT (261)
CHAR (262)
DOUBLE (263)
VOID (264)
WHILE (265)
CONTINUE (266)
BREAK (267)
RETURN (268)
LP (269)
RP (270)
LB (271)
RB (272)
LSB (273) 15
RSB (274) 15
DBQUOTE (275)
SNQUOTE (276)
RELOP (277) 7 11
LOGOP (278) 6 10
ASGNOP (279)
ADD (280) 22
MINUS (281) 17 23
DIV (282) 25
STAR (283) 16 24
PERCNT (284) 26
NOT (285) 18
AMPRESAND (286) 19
SMCOL (287)
IDENT (288) 12
NUM (289) 13
STRING (290) 14
CHARLITERAL (291)
COMA (292)
INCOP (293) 20 21
EQL (294)
MAIN (295)
ARGC (296)
ARGV (297)


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
st (44)
    on left: 1, on right: 0
expr (45)
    on left: 2 3 4 5, on right: 1 3 15
rel_expr (46)
    on left: 6 7 8, on right: 5 9 10 11
rel_expr_star (47)
    on left: 9 10 11, on right: 8 9
primary_expr (48)
    on left: 12 13 14 15 16 17 18 19 20 21, on right: 2 3 4 6 7 10
    11 16 17 18 19 20 21
binary_op (49)
    on left: 22 23 24 25 26, on right: 2 3


State 0

    0 $accept: . st $end

    LSB        shift, and go to state 1
    MINUS      shift, and go to state 2
    STAR       shift, and go to state 3
    NOT        shift, and go to state 4
    AMPRESAND  shift, and go to state 5
    IDENT      shift, and go to state 6
    NUM        shift, and go to state 7
    STRING     shift, and go to state 8
    INCOP      shift, and go to state 9

    st             go to state 10
    expr           go to state 11
    rel_expr       go to state 12
    rel_expr_star  go to state 13
    primary_expr   go to state 14


State 1

   15 primary_expr: LSB . expr RSB

    LSB        shift, and go to state 1
    MINUS      shift, and go to state 2
    STAR       shift, and go to state 3
    NOT        shift, and go to state 4
    AMPRESAND  shift, and go to state 5
    IDENT      shift, and go to state 6
    NUM        shift, and go to state 7
    STRING     shift, and go to state 8
    INCOP      shift, and go to state 9

    expr           go to state 15
    rel_expr       go to state 12
    rel_expr_star  go to state 13
    primary_expr   go to state 14


State 2

   17 primary_expr: MINUS . primary_expr

    LSB        shift, and go to state 1
    MINUS      shift, and go to state 2
    STAR       shift, and go to state 3
    NOT        shift, and go to state 4
    AMPRESAND  shift, and go to state 5
    IDENT      shift, and go to state 6
    NUM        shift, and go to state 7
    STRING     shift, and go to state 8
    INCOP      shift, and go to state 9

    primary_expr  go to state 16


State 3

   16 primary_expr: STAR . primary_expr

    LSB        shift, and go to state 1
    MINUS      shift, and go to state 2
    STAR       shift, and go to state 3
    NOT        shift, and go to state 4
    AMPRESAND  shift, and go to state 5
    IDENT      shift, and go to state 6
    NUM        shift, and go to state 7
    STRING     shift, and go to state 8
    INCOP      shift, and go to state 9

    primary_expr  go to state 17


State 4

   18 primary_expr: NOT . primary_expr

    LSB        shift, and go to state 1
    MINUS      shift, and go to state 2
    STAR       shift, and go to state 3
    NOT        shift, and go to state 4
    AMPRESAND  shift, and go to state 5
    IDENT      shift, and go to state 6
    NUM        shift, and go to state 7
    STRING     shift, and go to state 8
    INCOP      shift, and go to state 9

    primary_expr  go to state 18


State 5

   19 primary_expr: AMPRESAND . primary_expr

    LSB        shift, and go to state 1
    MINUS      shift, and go to state 2
    STAR       shift, and go to state 3
    NOT        shift, and go to state 4
    AMPRESAND  shift, and go to state 5
    IDENT      shift, and go to state 6
    NUM        shift, and go to state 7
    STRING     shift, and go to state 8
    INCOP      shift, and go to state 9

    primary_expr  go to state 19


State 6

   12 primary_expr: IDENT .

    $default  reduce using rule 12 (primary_expr)


State 7

   13 primary_expr: NUM .

    $default  reduce using rule 13 (primary_expr)


State 8

   14 primary_expr: STRING .

    $default  reduce using rule 14 (primary_expr)


State 9

   21 primary_expr: INCOP . primary_expr

    LSB        shift, and go to state 1
    MINUS      shift, and go to state 2
    STAR       shift, and go to state 3
    NOT        shift, and go to state 4
    AMPRESAND  shift, and go to state 5
    IDENT      shift, and go to state 6
    NUM        shift, and go to state 7
    STRING     shift, and go to state 8
    INCOP      shift, and go to state 9

    primary_expr  go to state 20


State 10

    0 $accept: st . $end

    $end  shift, and go to state 21


State 11

    1 st: expr .
    3 expr: expr . binary_op primary_expr

    ADD     shift, and go to state 22
    MINUS   shift, and go to state 23
    DIV     shift, and go to state 24
    STAR    shift, and go to state 25
    PERCNT  shift, and go to state 26

    $default  reduce using rule 1 (st)

    binary_op  go to state 27


State 12

    5 expr: rel_expr .
    9 rel_expr_star: rel_expr . rel_expr_star
   10              | rel_expr . LOGOP primary_expr
   11              | rel_expr . RELOP primary_expr

    LSB        shift, and go to state 1
    RELOP      shift, and go to state 28
    LOGOP      shift, and go to state 29
    MINUS      shift, and go to state 2
    STAR       shift, and go to state 3
    NOT        shift, and go to state 4
    AMPRESAND  shift, and go to state 5
    IDENT      shift, and go to state 6
    NUM        shift, and go to state 7
    STRING     shift, and go to state 8
    INCOP      shift, and go to state 9

    MINUS     [reduce using rule 5 (expr)]
    STAR      [reduce using rule 5 (expr)]
    $default  reduce using rule 5 (expr)

    rel_expr       go to state 30
    rel_expr_star  go to state 31
    primary_expr   go to state 32


State 13

    8 rel_expr: rel_expr_star .

    $default  reduce using rule 8 (rel_expr)


State 14

    2 expr: primary_expr . binary_op primary_expr
    4     | primary_expr .
    6 rel_expr: primary_expr . LOGOP primary_expr
    7         | primary_expr . RELOP primary_expr
   20 primary_expr: primary_expr . INCOP

    RELOP   shift, and go to state 33
    LOGOP   shift, and go to state 34
    ADD     shift, and go to state 22
    MINUS   shift, and go to state 23
    DIV     shift, and go to state 24
    STAR    shift, and go to state 25
    PERCNT  shift, and go to state 26
    INCOP   shift, and go to state 35

    ADD       [reduce using rule 4 (expr)]
    MINUS     [reduce using rule 4 (expr)]
    DIV       [reduce using rule 4 (expr)]
    STAR      [reduce using rule 4 (expr)]
    PERCNT    [reduce using rule 4 (expr)]
    $default  reduce using rule 4 (expr)

    binary_op  go to state 36


State 15

    3 expr: expr . binary_op primary_expr
   15 primary_expr: LSB expr . RSB

    RSB     shift, and go to state 37
    ADD     shift, and go to state 22
    MINUS   shift, and go to state 23
    DIV     shift, and go to state 24
    STAR    shift, and go to state 25
    PERCNT  shift, and go to state 26

    binary_op  go to state 27


State 16

   17 primary_expr: MINUS primary_expr .
   20             | primary_expr . INCOP

    INCOP  shift, and go to state 35

    INCOP     [reduce using rule 17 (primary_expr)]
    $default  reduce using rule 17 (primary_expr)


State 17

   16 primary_expr: STAR primary_expr .
   20             | primary_expr . INCOP

    INCOP  shift, and go to state 35

    INCOP     [reduce using rule 16 (primary_expr)]
    $default  reduce using rule 16 (primary_expr)


State 18

   18 primary_expr: NOT primary_expr .
   20             | primary_expr . INCOP

    INCOP  shift, and go to state 35

    INCOP     [reduce using rule 18 (primary_expr)]
    $default  reduce using rule 18 (primary_expr)


State 19

   19 primary_expr: AMPRESAND primary_expr .
   20             | primary_expr . INCOP

    INCOP  shift, and go to state 35

    INCOP     [reduce using rule 19 (primary_expr)]
    $default  reduce using rule 19 (primary_expr)


State 20

   20 primary_expr: primary_expr . INCOP
   21             | INCOP primary_expr .

    INCOP  shift, and go to state 35

    INCOP     [reduce using rule 21 (primary_expr)]
    $default  reduce using rule 21 (primary_expr)


State 21

    0 $accept: st $end .

    $default  accept


State 22

   22 binary_op: ADD .

    $default  reduce using rule 22 (binary_op)


State 23

   23 binary_op: MINUS .

    $default  reduce using rule 23 (binary_op)


State 24

   25 binary_op: DIV .

    $default  reduce using rule 25 (binary_op)


State 25

   24 binary_op: STAR .

    $default  reduce using rule 24 (binary_op)


State 26

   26 binary_op: PERCNT .

    $default  reduce using rule 26 (binary_op)


State 27

    3 expr: expr binary_op . primary_expr

    LSB        shift, and go to state 1
    MINUS      shift, and go to state 2
    STAR       shift, and go to state 3
    NOT        shift, and go to state 4
    AMPRESAND  shift, and go to state 5
    IDENT      shift, and go to state 6
    NUM        shift, and go to state 7
    STRING     shift, and go to state 8
    INCOP      shift, and go to state 9

    primary_expr  go to state 38


State 28

   11 rel_expr_star: rel_expr RELOP . primary_expr

    LSB        shift, and go to state 1
    MINUS      shift, and go to state 2
    STAR       shift, and go to state 3
    NOT        shift, and go to state 4
    AMPRESAND  shift, and go to state 5
    IDENT      shift, and go to state 6
    NUM        shift, and go to state 7
    STRING     shift, and go to state 8
    INCOP      shift, and go to state 9

    primary_expr  go to state 39


State 29

   10 rel_expr_star: rel_expr LOGOP . primary_expr

    LSB        shift, and go to state 1
    MINUS      shift, and go to state 2
    STAR       shift, and go to state 3
    NOT        shift, and go to state 4
    AMPRESAND  shift, and go to state 5
    IDENT      shift, and go to state 6
    NUM        shift, and go to state 7
    STRING     shift, and go to state 8
    INCOP      shift, and go to state 9

    primary_expr  go to state 40


State 30

    9 rel_expr_star: rel_expr . rel_expr_star
   10              | rel_expr . LOGOP primary_expr
   11              | rel_expr . RELOP primary_expr

    LSB        shift, and go to state 1
    RELOP      shift, and go to state 28
    LOGOP      shift, and go to state 29
    MINUS      shift, and go to state 2
    STAR       shift, and go to state 3
    NOT        shift, and go to state 4
    AMPRESAND  shift, and go to state 5
    IDENT      shift, and go to state 6
    NUM        shift, and go to state 7
    STRING     shift, and go to state 8
    INCOP      shift, and go to state 9

    rel_expr       go to state 30
    rel_expr_star  go to state 31
    primary_expr   go to state 32


State 31

    8 rel_expr: rel_expr_star .
    9 rel_expr_star: rel_expr rel_expr_star .

    $end       reduce using rule 9 (rel_expr_star)
    LSB        reduce using rule 8 (rel_expr)
    LSB        [reduce using rule 9 (rel_expr_star)]
    RSB        reduce using rule 9 (rel_expr_star)
    RELOP      reduce using rule 8 (rel_expr)
    RELOP      [reduce using rule 9 (rel_expr_star)]
    LOGOP      reduce using rule 8 (rel_expr)
    LOGOP      [reduce using rule 9 (rel_expr_star)]
    ADD        reduce using rule 9 (rel_expr_star)
    MINUS      reduce using rule 8 (rel_expr)
    MINUS      [reduce using rule 9 (rel_expr_star)]
    DIV        reduce using rule 9 (rel_expr_star)
    STAR       reduce using rule 8 (rel_expr)
    STAR       [reduce using rule 9 (rel_expr_star)]
    PERCNT     reduce using rule 9 (rel_expr_star)
    NOT        reduce using rule 8 (rel_expr)
    NOT        [reduce using rule 9 (rel_expr_star)]
    AMPRESAND  reduce using rule 8 (rel_expr)
    AMPRESAND  [reduce using rule 9 (rel_expr_star)]
    IDENT      reduce using rule 8 (rel_expr)
    IDENT      [reduce using rule 9 (rel_expr_star)]
    NUM        reduce using rule 8 (rel_expr)
    NUM        [reduce using rule 9 (rel_expr_star)]
    STRING     reduce using rule 8 (rel_expr)
    STRING     [reduce using rule 9 (rel_expr_star)]
    INCOP      reduce using rule 8 (rel_expr)
    INCOP      [reduce using rule 9 (rel_expr_star)]
    $default   reduce using rule 8 (rel_expr)


State 32

    6 rel_expr: primary_expr . LOGOP primary_expr
    7         | primary_expr . RELOP primary_expr
   20 primary_expr: primary_expr . INCOP

    RELOP  shift, and go to state 33
    LOGOP  shift, and go to state 34
    INCOP  shift, and go to state 35


State 33

    7 rel_expr: primary_expr RELOP . primary_expr

    LSB        shift, and go to state 1
    MINUS      shift, and go to state 2
    STAR       shift, and go to state 3
    NOT        shift, and go to state 4
    AMPRESAND  shift, and go to state 5
    IDENT      shift, and go to state 6
    NUM        shift, and go to state 7
    STRING     shift, and go to state 8
    INCOP      shift, and go to state 9

    primary_expr  go to state 41


State 34

    6 rel_expr: primary_expr LOGOP . primary_expr

    LSB        shift, and go to state 1
    MINUS      shift, and go to state 2
    STAR       shift, and go to state 3
    NOT        shift, and go to state 4
    AMPRESAND  shift, and go to state 5
    IDENT      shift, and go to state 6
    NUM        shift, and go to state 7
    STRING     shift, and go to state 8
    INCOP      shift, and go to state 9

    primary_expr  go to state 42


State 35

   20 primary_expr: primary_expr INCOP .

    $default  reduce using rule 20 (primary_expr)


State 36

    2 expr: primary_expr binary_op . primary_expr

    LSB        shift, and go to state 1
    MINUS      shift, and go to state 2
    STAR       shift, and go to state 3
    NOT        shift, and go to state 4
    AMPRESAND  shift, and go to state 5
    IDENT      shift, and go to state 6
    NUM        shift, and go to state 7
    STRING     shift, and go to state 8
    INCOP      shift, and go to state 9

    primary_expr  go to state 43


State 37

   15 primary_expr: LSB expr RSB .

    $default  reduce using rule 15 (primary_expr)


State 38

    3 expr: expr binary_op primary_expr .
   20 primary_expr: primary_expr . INCOP

    INCOP  shift, and go to state 35

    $default  reduce using rule 3 (expr)


State 39

   11 rel_expr_star: rel_expr RELOP primary_expr .
   20 primary_expr: primary_expr . INCOP

    INCOP  shift, and go to state 35

    INCOP     [reduce using rule 11 (rel_expr_star)]
    $default  reduce using rule 11 (rel_expr_star)


State 40

   10 rel_expr_star: rel_expr LOGOP primary_expr .
   20 primary_expr: primary_expr . INCOP

    INCOP  shift, and go to state 35

    INCOP     [reduce using rule 10 (rel_expr_star)]
    $default  reduce using rule 10 (rel_expr_star)


State 41

    7 rel_expr: primary_expr RELOP primary_expr .
   20 primary_expr: primary_expr . INCOP

    INCOP  shift, and go to state 35

    INCOP     [reduce using rule 7 (rel_expr)]
    $default  reduce using rule 7 (rel_expr)


State 42

    6 rel_expr: primary_expr LOGOP primary_expr .
   20 primary_expr: primary_expr . INCOP

    INCOP  shift, and go to state 35

    INCOP     [reduce using rule 6 (rel_expr)]
    $default  reduce using rule 6 (rel_expr)


State 43

    2 expr: primary_expr binary_op primary_expr .
   20 primary_expr: primary_expr . INCOP

    INCOP  shift, and go to state 35

    $default  reduce using rule 2 (expr)
